// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component >> Input Given input has variant ERROR Should match snapshot correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "#7F8183",
          "display": "flex",
          "fontSize": 14,
          "lineHeight": 18,
          "marginBottom": 8,
        },
      ]
    }
  >
    Error variant
  </Text>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "backgroundColor": "#D94E6928",
            "borderColor": "#D94E69",
            "borderRadius": 8,
            "borderWidth": 1,
            "color": "#282828",
            "flex": 1,
            "paddingBottom": 16,
            "paddingLeft": 16,
            "paddingRight": 8,
            "paddingTop": 16,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
    <View
      style={
        Array [
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "display": "flex",
            "height": "100%",
            "justifyContent": "center",
            "position": "absolute",
            "right": 16,
            "top": 0,
          },
          Array [
            Object {},
          ],
        ]
      }
    >
      <RNSVGSvgView
        align="xMidYMid"
        bbHeight={20}
        bbWidth={20}
        fill="#D94E69"
        focusable={false}
        height={20}
        meetOrSlice={0}
        minX={0}
        minY={0}
        secondaryFill={null}
        secondaryOpacity={0.4}
        size={20}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            Object {},
            Object {
              "flex": 0,
              "height": 20,
              "width": 20,
            },
          ]
        }
        testID="O4G7U-error-icon"
        vbHeight={512}
        vbWidth={512}
        width={20}
      >
        <RNSVGGroup
          fill={4292431465}
          propList={
            Array [
              "fill",
            ]
          }
        >
          <RNSVGPath
            d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
            fill={4292431465}
            fillOpacity={1}
            propList={
              Array [
                "fill",
                "fillOpacity",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
  </View>
</View>
`;

exports[`component >> Input Given input has variant SUCCESS Should match snapshot correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "#7F8183",
          "display": "flex",
          "fontSize": 14,
          "lineHeight": 18,
          "marginBottom": 8,
        },
      ]
    }
  >
    Success variant
  </Text>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "backgroundColor": "#67B6A849",
            "borderColor": "#67B6A8",
            "borderRadius": 8,
            "borderWidth": 1,
            "color": "#282828",
            "flex": 1,
            "paddingBottom": 16,
            "paddingLeft": 16,
            "paddingRight": 8,
            "paddingTop": 16,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
    <View
      style={
        Array [
          Object {
            "alignContent": "center",
            "alignItems": "center",
            "display": "flex",
            "height": "100%",
            "justifyContent": "center",
            "position": "absolute",
            "right": 16,
            "top": 0,
          },
          Array [
            Object {},
          ],
        ]
      }
    >
      <RNSVGSvgView
        align="xMidYMid"
        bbHeight={20}
        bbWidth={20}
        fill="#67B6A8"
        focusable={false}
        height={20}
        meetOrSlice={0}
        minX={0}
        minY={0}
        secondaryFill={null}
        secondaryOpacity={0.4}
        size={20}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            Object {},
            Object {
              "flex": 0,
              "height": 20,
              "width": 20,
            },
          ]
        }
        testID="E7P0M-success-icon"
        vbHeight={512}
        vbWidth={512}
        width={20}
      >
        <RNSVGGroup
          fill={4284987048}
          propList={
            Array [
              "fill",
            ]
          }
        >
          <RNSVGPath
            d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
            fill={4284987048}
            fillOpacity={1}
            propList={
              Array [
                "fill",
                "fillOpacity",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
  </View>
</View>
`;

exports[`component >> Input Given input has variant of default Given input has NO label Should render input with label correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "backgroundColor": "#2828281e",
            "borderColor": "#2828281e",
            "borderRadius": 8,
            "borderWidth": 1,
            "color": "#282828",
            "flex": 1,
            "paddingBottom": 16,
            "paddingLeft": 16,
            "paddingRight": 8,
            "paddingTop": 16,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
  </View>
</View>
`;

exports[`component >> Input Given input has variant of default Given input has label Should render input with label correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "#7F8183",
          "display": "flex",
          "fontSize": 14,
          "lineHeight": 18,
          "marginBottom": 8,
        },
      ]
    }
  >
    This is a test label
  </Text>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "backgroundColor": "#2828281e",
            "borderColor": "#2828281e",
            "borderRadius": 8,
            "borderWidth": 1,
            "color": "#282828",
            "flex": 1,
            "paddingBottom": 16,
            "paddingLeft": 16,
            "paddingRight": 8,
            "paddingTop": 16,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
  </View>
</View>
`;

exports[`component >> Input Given input has variant underline Given input has NO label Should render input with label correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "borderBottomWidth": 1,
            "flex": 1,
            "paddingBottom": 8,
            "paddingTop": 8,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
  </View>
</View>
`;

exports[`component >> Input Given input has variant underline Given input has label Should render input with label correctly 1`] = `
<View
  style={
    Array [
      Object {
        "display": "flex",
      },
      Array [
        Object {
          "elevation": 2,
          "shadowColor": "#282828",
          "shadowOffset": Object {
            "height": 4,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 10,
        },
      ],
    ]
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "#7F8183",
          "display": "flex",
          "fontSize": 14,
          "lineHeight": 18,
          "marginBottom": 8,
        },
      ]
    }
  >
    This is a test label
  </Text>
  <View
    style={
      Array [
        Object {
          "display": "flex",
          "flexDirection": "row",
        },
        Array [
          Object {},
        ],
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      onPressIn={[MockFunction]}
      placeholder="Test placeholder"
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "borderBottomWidth": 1,
            "flex": 1,
            "paddingBottom": 8,
            "paddingTop": 8,
          },
        ]
      }
      underlineColorAndroid="transparent"
    />
  </View>
</View>
`;
